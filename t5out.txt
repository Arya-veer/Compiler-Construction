            FIRST AND FOLLOW SETS AUTOMATED         
            BOTH LEXICAL AND SYNTAX ANALYSIS MODULE IMPLEMENTED         
            MODULES WORK WITH ALL GIVEN TEST CASES
Enter your option: RUNNING PARSER

                      [32m FIRST AND FOLLOW AUTOMATED [0m

GIVEN SOURCE CODE IS SYNTACTICALLY CORRECT



LINE 15: ARRAY VARIABLE CAN NOT BE USED FOR THIS OPERATOR

LINE 15: ARRAY VARIABLE CAN NOT BE USED FOR THIS OPERATOR

LINE 15: TYPE ERROR OCCURED
LINE 15:CAN NOT ASSIGN VALUE TO AN ARRAY

LINE 21: ARRAY CAN NOT BE ASSIGNED DUE TO RANGE MISMATCH

LINE 22: ARRAY INDEX OUT OF BOUNDS 

LINE 23: TYPE ERROR OCCURED
LINE 23: ERROR OCCURED WHILE ASSIGNMENT, LEFT AND RIGHT TYPES DID NOT MATCH

LINE 17: WHILE LOOP VARIABLE MUST BE ASSIGED VALUE ATLEAST ONCE

LINE 25: ARRAY VARIABLE CAN NOT BE USED FOR THIS OPERATOR

LINE 25: TYPE ERROR OCCURED
LINE 25: TYPE ERROR OCCURED
LINE 25: ERROR OCCURED WHILE ASSIGNMENT, LEFT AND RIGHT TYPES DID NOT MATCH




LINE 48: TYPE ERROR OCCURED
LINE 48: TYPE ERROR OCCURED
LINE 48: ERROR OCCURED WHILE ASSIGNMENT, LEFT AND RIGHT TYPES DID NOT MATCH

LINE 58: ARRAY INDEX OUT OF BOUNDS 


LINE 60:CAN NOT ASSIGN VALUE TO AN ARRAY

LINE 63: VARIABLE NOT DECLARED

LINE 64: TYPE ERROR OCCURED
LINE 66: ARRAY INDEX OUT OF BOUNDS 

LINE 66: VARIABLE NOT DEFINED IN SCOPE

LINE 66: TYPE ERROR OCCURED
LINE 66: VARIABLE NOT DEFINED IN SCOPE

LINE 66: VARIABLE ON LEFT IS NOT DEFINED

LINE 69: ERROR OCCURED WHILE ASSIGNMENT, LEFT AND RIGHT TYPES DID NOT MATCH

LINE 75: ARRAY INDEX OUT OF BOUNDS 

LINE 93: ERROR OCCURED WHILE ASSIGNMENT, LEFT AND RIGHT TYPES DID NOT MATCH

LINE 98: TYPE ERROR OCCURED
LINE 98: TYPE ERROR OCCURED
LINE 98: ERROR OCCURED WHILE ASSIGNMENT, LEFT AND RIGHT TYPES DID NOT MATCH

LINE 99: TYPE ERROR OCCURED
LINE 99: ERROR OCCURED WHILE ASSIGNMENT, LEFT AND RIGHT TYPES DID NOT MATCH

LINE 103: ARRAY INDEX OUT OF BOUNDS 

LINE 105:CAN NOT ASSIGN VALUE TO AN ARRAY


LINE 108: ARRAY CAN NOT BE ASSIGNED DUE TO RANGE MISMATCH



					TRAVERSAL 1 ENDED 



					TRAVERSAL 2 ENDED 

a		f1		[32-81]		integer		yes		static		[10-30]		40		0		0		

b		f1		[32-81]		integer		yes		static		[10-30]		40		0		0		

c		f1		[32-81]		real		no		**		**		4		0		0		

m		f1		[32-81]		boolean		no		**		**		1		0		0		

n		f1		[32-81]		integer		no		**		**		2		0		0		

x		f1		[32-81]		real		no		**		**		4		0		1		

y		f1		[32-81]		real		no		**		**		4		4		1		

A		f1		[32-81]		integer		yes		static		[4-10]		12		14		1		

B		f1		[32-81]		integer		yes		static		[4-10]		12		16		1		

C		f1		[32-81]		integer		yes		static		[10-30]		40		20		1		

D		f1		[32-81]		integer		yes		static		[10-30]		40		18		1		

k		f1		[32-81]		integer		no		**		**		2		12		1		

p		f1		[32-81]		real		no		**		**		4		8		1		

v		f1		[32-81]		real		no		**		**		4		6		2		

k		f1		[32-81]		integer		no		**		**		2		0		2		

u		f1		[32-81]		real		no		**		**		4		2		2		

x		var_demo_array		[5-32]		integer		no		**		**		2		0		0		

m		var_demo_array		[5-32]		integer		yes		static		[-12-20]		64		0		0		

p		var_demo_array		[5-32]		real		no		**		**		4		0		0		

n		var_demo_array		[5-32]		integer		no		**		**		2		0		0		

k		var_demo_array		[5-32]		boolean		no		**		**		1		0		0		

a		var_demo_array		[5-32]		integer		no		**		**		2		0		1		

b		var_demo_array		[5-32]		integer		no		**		**		2		2		1		

h		var_demo_array		[5-32]		integer		no		**		**		2		4		1		

p		var_demo_array		[5-32]		integer		yes		static		[-12-20]		64		6		1		

b		var_demo_array		[5-32]		integer		yes		static		[2-20]		36		4		2		

p		var_demo_array		[5-32]		integer		no		**		**		2		0		2		

u		var_demo_array		[5-32]		integer		no		**		**		2		2		2		

w		driver		[81-10000]		integer		no		**		**		2		30		1		

A		driver		[81-10000]		integer		no		**		**		2		2		1		

B		driver		[81-10000]		integer		yes		static		[2-20]		36		10		1		

C		driver		[81-10000]		integer		yes		static		[2-20]		36		12		1		

value		driver		[81-10000]		real		no		**		**		4		18		1		

D		driver		[81-10000]		integer		yes		static		[20-40]		40		32		1		

v_1_2_3		driver		[81-10000]		integer		no		**		**		2		0		1		

a		driver		[81-10000]		integer		no		**		**		2		14		1		

b		driver		[81-10000]		integer		no		**		**		2		16		1		

u1		driver		[81-10000]		boolean		no		**		**		1		4		1		

k		driver		[81-10000]		boolean		no		**		**		1		5		1		

p		driver		[81-10000]		real		no		**		**		4		6		1		

q		driver		[81-10000]		real		no		**		**		4		22		1		

r		driver		[81-10000]		real		no		**		**		4		26		1		

Enter your option: 