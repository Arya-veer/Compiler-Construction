LINE NO: 1         LEXEME: <<<         TOKEN: DRIVERDEF
Popped Non Terminal program
Popped Non Terminal moduleDeclarations
Popped Non Terminal otherModules
Popped Non Terminal driverModule
Popped Terminal DRIVERDEF
LINE NO: 1         LEXEME: driver         TOKEN: DRIVER
Popped Terminal DRIVER
LINE NO: 1         LEXEME: program         TOKEN: PROGRAM
Popped Terminal PROGRAM
LINE NO: 1         LEXEME: >>>         TOKEN: DRIVERENDDEF
Popped Terminal DRIVERENDDEF
LINE NO: 2         LEXEME: start         TOKEN: START
Popped Non Terminal moduleDef
Popped Terminal START
LINE NO: 3         LEXEME: a         TOKEN: ID
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal simpleStmt
Popped Non Terminal assignmentStmt
Popped Terminal ID
LINE NO: 3         LEXEME: :=         TOKEN: ASSIGNOP
Popped Non Terminal whichStmt
Popped Non Terminal lvalueIDStmt
Popped Terminal ASSIGNOP
LINE NO: 3         LEXEME: ;         TOKEN: SEMICOL
Popped Non Terminal expression

 [31m PARSING ERROR At line 3, PARSER CANNOT DERIVE TOKEN SEMICOL [0m
ERROR RECOVERY DONE
LINE NO: 4         LEXEME: end         TOKEN: END
Popped Non Terminal statements
Popped Terminal END
Popped Non Terminal otherModules
Popped Terminal EOF

PRINTING PARSE TREE


TERMINAL = EPSILON
Non Terminal = moduleDeclarations
Non Terminal = program
TERMINAL = EPSILON
Non Terminal = otherModules
Terminal = DRIVERDEF
Non Terminal = driverModule
Terminal = DRIVER
Terminal = PROGRAM
Terminal = DRIVERENDDEF
Terminal = START
Non Terminal = moduleDef
Terminal = ID
Non Terminal = assignmentStmt
Terminal = ASSIGNOP
Non Terminal = lvalueIDStmt
Non Terminal = expression
Terminal = SEMICOL
Non Terminal = whichStmt
Non Terminal = simpleStmt
Non Terminal = statement
Non Terminal = statements
TERMINAL = EPSILON
Non Terminal = statements
Terminal = END
TERMINAL = EPSILON
Non Terminal = otherModules
Non Terminal = finalProgram
Terminal = EOF
