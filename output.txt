RULES ADDED
PARSE TABLE FILLED WITH -1

PARSE TABLE POPULATED

TWIN BUFFER INITIALIZED

STACK CREATED
LINE NO: 1	LEXEME: declare	TOKEN: declare
Popped Non Terminal program
Popped Non Terminal moduleDeclarations
Popped Non Terminal moduleDeclaration
Popped Terminal DECLARE
LINE NO: 1	LEXEME: module	TOKEN: module
Popped Terminal MODULE
LINE NO: 1	LEXEME: mod1	TOKEN: ID
Popped Terminal ID
LINE NO: 1	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 2	LEXEME: <<<	TOKEN: <<<
Popped Non Terminal moduleDeclarations
Popped Non Terminal otherModules
Popped Non Terminal driverModule
Popped Terminal DRIVERDEF
LINE NO: 2	LEXEME: driver	TOKEN: driver
Popped Terminal DRIVER
LINE NO: 2	LEXEME: program	TOKEN: program
Popped Terminal PROGRAM
LINE NO: 2	LEXEME: >>>	TOKEN: >>>
Popped Terminal DRIVERENDDEF
LINE NO: 3	LEXEME: start	TOKEN: start
Popped Non Terminal moduleDef
Popped Terminal START
LINE NO: 4	LEXEME: declare	TOKEN: declare
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal declareStmt
Popped Terminal DECLARE
LINE NO: 4	LEXEME: v	TOKEN: ID
Popped Non Terminal idList
Popped Terminal ID
LINE NO: 4	LEXEME: ,	TOKEN: ,
Popped Non Terminal leftFactored_idList
Popped Terminal COMMA
LINE NO: 4	LEXEME: w	TOKEN: ID
Popped Terminal ID
LINE NO: 4	LEXEME: ,	TOKEN: ,
Popped Non Terminal leftFactored_idList
Popped Terminal COMMA
LINE NO: 4	LEXEME: x	TOKEN: ID
Popped Terminal ID
LINE NO: 4	LEXEME: :	TOKEN: :
Popped Non Terminal leftFactored_idList
Popped Terminal COLON
LINE NO: 4	LEXEME: integer	TOKEN: integer
Popped Non Terminal dataType
Popped Terminal INTEGER
LINE NO: 4	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 5	LEXEME: get_value	TOKEN: get_value
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal ioStmt
Popped Terminal GET_VALUE
LINE NO: 5	LEXEME: (	TOKEN: (
Popped Terminal BO
LINE NO: 5	LEXEME: v	TOKEN: ID
Popped Terminal ID
LINE NO: 5	LEXEME: )	TOKEN: )
Popped Terminal BC
LINE NO: 5	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 6	LEXEME: w	TOKEN: ID
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal simpleStmt
Popped Non Terminal assignmentStmt
Popped Terminal ID
LINE NO: 6	LEXEME: :=	TOKEN: :=
Popped Non Terminal whichStmt
Popped Non Terminal lvalueIDStmt
Popped Terminal ASSIGNOP
LINE NO: 6	LEXEME: 5	TOKEN: NUM
Popped Non Terminal expression
Popped Non Terminal arithmeticBooleanExpr
Popped Non Terminal arithmeticExpr
Popped Non Terminal term
Popped Non Terminal factor
Popped Non Terminal var
Popped Terminal NUM
LINE NO: 6	LEXEME: ;	TOKEN: ;
Popped Non Terminal leftFactored_term
Popped Non Terminal leftFactored_arithmeticExpr
Popped Non Terminal relationalTerm
Popped Non Terminal logicalTerm
Popped Terminal SEMICOL
LINE NO: 7	LEXEME: declare	TOKEN: declare
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal declareStmt
Popped Terminal DECLARE
LINE NO: 7	LEXEME: m	TOKEN: ID
Popped Non Terminal idList
Popped Terminal ID
LINE NO: 7	LEXEME: :	TOKEN: :
Popped Non Terminal leftFactored_idList
Popped Terminal COLON
LINE NO: 7	LEXEME: real	TOKEN: real
Popped Non Terminal dataType
Popped Terminal REAL
LINE NO: 7	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 8	LEXEME: [	TOKEN: [
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal simpleStmt
Popped Non Terminal moduleReuseStmt
Popped Non Terminal optional
Popped Terminal SQBO
LINE NO: 8	LEXEME: r	TOKEN: ID
Popped Non Terminal idList
Popped Terminal ID
LINE NO: 8	LEXEME: ,	TOKEN: ,
Popped Non Terminal leftFactored_idList
Popped Terminal COMMA
LINE NO: 8	LEXEME: m	TOKEN: ID
Popped Terminal ID
LINE NO: 8	LEXEME: ]	TOKEN: ]
Popped Non Terminal leftFactored_idList
Popped Terminal SQBC
LINE NO: 8	LEXEME: :=	TOKEN: :=
Popped Terminal ASSIGNOP
LINE NO: 8	LEXEME: use	TOKEN: use
Popped Terminal USE
LINE NO: 8	LEXEME: module	TOKEN: module
Popped Terminal MODULE
LINE NO: 8	LEXEME: mod1	TOKEN: ID
Popped Terminal ID
LINE NO: 8	LEXEME: with	TOKEN: with
Popped Terminal WITH
LINE NO: 8	LEXEME: parameters	TOKEN: parameters
Popped Terminal PARAMETERS
LINE NO: 8	LEXEME: v	TOKEN: ID
Popped Non Terminal idList
Popped Terminal ID
LINE NO: 8	LEXEME: ,	TOKEN: ,
Popped Non Terminal leftFactored_idList
Popped Terminal COMMA
LINE NO: 8	LEXEME: w	TOKEN: ID
Popped Terminal ID
LINE NO: 8	LEXEME: ;	TOKEN: ;
Popped Non Terminal leftFactored_idList
Popped Terminal SEMICOL
LINE NO: 9	LEXEME: print	TOKEN: print
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal ioStmt
Popped Terminal PRINT
LINE NO: 9	LEXEME: (	TOKEN: (
Popped Terminal BO
LINE NO: 9	LEXEME: r	TOKEN: ID
Popped Non Terminal leftFactored_ioStmt
Popped Non Terminal var
Popped Terminal ID
LINE NO: 9	LEXEME: )	TOKEN: )
Popped Non Terminal whichId
Popped Terminal BC
LINE NO: 9	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 10	LEXEME: print	TOKEN: print
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal ioStmt
Popped Terminal PRINT
LINE NO: 10	LEXEME: (	TOKEN: (
Popped Terminal BO
LINE NO: 10	LEXEME: m	TOKEN: ID
Popped Non Terminal leftFactored_ioStmt
Popped Non Terminal var
Popped Terminal ID
LINE NO: 10	LEXEME: )	TOKEN: )
Popped Non Terminal whichId
Popped Terminal BC
LINE NO: 10	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 11	LEXEME: end	TOKEN: end
Popped Non Terminal statements
Popped Terminal END
LINE NO: 13	LEXEME: <<	TOKEN: <<
Popped Non Terminal otherModules
Popped Non Terminal module
Popped Terminal DEF
LINE NO: 13	LEXEME: module	TOKEN: module
Popped Terminal MODULE
LINE NO: 13	LEXEME: mod1	TOKEN: ID
Popped Terminal ID
LINE NO: 13	LEXEME: >>	TOKEN: >>
Popped Terminal ENDDEF
LINE NO: 14	LEXEME: takes	TOKEN: takes
Popped Terminal TAKES
LINE NO: 14	LEXEME: input	TOKEN: input
Popped Terminal INPUT
LINE NO: 14	LEXEME: [	TOKEN: [
Popped Terminal SQBO
LINE NO: 14	LEXEME: a	TOKEN: ID
Popped Non Terminal input_plist
Popped Terminal ID
LINE NO: 14	LEXEME: :	TOKEN: :
Popped Terminal COLON
LINE NO: 14	LEXEME: integer	TOKEN: integer
Popped Non Terminal dataType
Popped Terminal INTEGER
LINE NO: 14	LEXEME: ,	TOKEN: ,
Popped Non Terminal leftFactored_input_plist
Popped Terminal COMMA
LINE NO: 14	LEXEME: b	TOKEN: ID
Popped Terminal ID
LINE NO: 14	LEXEME: :	TOKEN: :
Popped Terminal COLON
LINE NO: 14	LEXEME: integer	TOKEN: integer
Popped Non Terminal dataType
Popped Terminal INTEGER
LINE NO: 14	LEXEME: ]	TOKEN: ]
Popped Non Terminal leftFactored_input_plist
Popped Terminal SQBC
LINE NO: 14	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 15	LEXEME: returns	TOKEN: returns
Popped Non Terminal ret
Popped Terminal RETURNS
LINE NO: 15	LEXEME: [	TOKEN: [
Popped Terminal SQBO
LINE NO: 15	LEXEME: x	TOKEN: ID
Popped Non Terminal output_plist
Popped Terminal ID
LINE NO: 15	LEXEME: :	TOKEN: :
Popped Terminal COLON
LINE NO: 15	LEXEME: integer	TOKEN: integer
Popped Non Terminal type
Popped Terminal INTEGER
LINE NO: 15	LEXEME: ,	TOKEN: ,
Popped Non Terminal leftFactored_output_plist
Popped Terminal COMMA
LINE NO: 15	LEXEME: abc	TOKEN: ID
Popped Terminal ID
LINE NO: 15	LEXEME: :	TOKEN: :
Popped Terminal COLON
LINE NO: 15	LEXEME: real	TOKEN: real
Popped Non Terminal type
Popped Terminal REAL
LINE NO: 15	LEXEME: ]	TOKEN: ]
Popped Non Terminal leftFactored_output_plist
Popped Terminal SQBC
LINE NO: 15	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 16	LEXEME: start	TOKEN: start
Popped Non Terminal moduleDef
Popped Terminal START
LINE NO: 17	LEXEME: declare	TOKEN: declare
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal declareStmt
Popped Terminal DECLARE
LINE NO: 17	LEXEME: c	TOKEN: ID
Popped Non Terminal idList
Popped Terminal ID
LINE NO: 17	LEXEME: :	TOKEN: :
Popped Non Terminal leftFactored_idList
Popped Terminal COLON
LINE NO: 17	LEXEME: real	TOKEN: real
Popped Non Terminal dataType
Popped Terminal REAL
LINE NO: 17	LEXEME: ;	TOKEN: ;
Popped Terminal SEMICOL
LINE NO: 18	LEXEME: c	TOKEN: ID
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal simpleStmt
Popped Non Terminal assignmentStmt
Popped Terminal ID
LINE NO: 18	LEXEME: :=	TOKEN: :=
Popped Non Terminal whichStmt
Popped Non Terminal lvalueIDStmt
Popped Terminal ASSIGNOP
END WORD IS 
LINE NO: 18	LEXEME: 0.000000	TOKEN: RNUM
Popped Non Terminal expression
Popped Non Terminal arithmeticBooleanExpr
Popped Non Terminal arithmeticExpr
Popped Non Terminal term
Popped Non Terminal factor
Popped Non Terminal var
Popped Terminal RNUM
LINE NO: 18	LEXEME: ;	TOKEN: ;
Popped Non Terminal leftFactored_term
Popped Non Terminal leftFactored_arithmeticExpr
Popped Non Terminal relationalTerm
Popped Non Terminal logicalTerm
Popped Terminal SEMICOL
LINE NO: 19	LEXEME: x	TOKEN: ID
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal simpleStmt
Popped Non Terminal assignmentStmt
Popped Terminal ID
LINE NO: 19	LEXEME: :=	TOKEN: :=
Popped Non Terminal whichStmt
Popped Non Terminal lvalueIDStmt
Popped Terminal ASSIGNOP
LINE NO: 19	LEXEME: a	TOKEN: ID
Popped Non Terminal expression
Popped Non Terminal arithmeticBooleanExpr
Popped Non Terminal arithmeticExpr
Popped Non Terminal term
Popped Non Terminal factor
Popped Non Terminal var
Popped Terminal ID
LINE NO: 19	LEXEME: +	TOKEN: +
Popped Non Terminal whichId
Popped Non Terminal leftFactored_term
Popped Non Terminal leftFactored_arithmeticExpr
Popped Non Terminal pm
Popped Terminal PLUS
LINE NO: 19	LEXEME: b	TOKEN: ID
Popped Non Terminal term
Popped Non Terminal factor
Popped Non Terminal var
Popped Terminal ID
LINE NO: 19	LEXEME: ;	TOKEN: ;
Popped Non Terminal whichId
Popped Non Terminal leftFactored_term
Popped Non Terminal leftFactored_arithmeticExpr
Popped Non Terminal relationalTerm
Popped Non Terminal logicalTerm
Popped Terminal SEMICOL
LINE NO: 20	LEXEME: abc	TOKEN: ID
Popped Non Terminal statements
Popped Non Terminal statement
Popped Non Terminal simpleStmt
Popped Non Terminal assignmentStmt
Popped Terminal ID
LINE NO: 20	LEXEME: :=	TOKEN: :=
Popped Non Terminal whichStmt
Popped Non Terminal lvalueIDStmt
Popped Terminal ASSIGNOP
LINE NO: 20	LEXEME: b	TOKEN: ID
Popped Non Terminal expression
Popped Non Terminal arithmeticBooleanExpr
Popped Non Terminal arithmeticExpr
Popped Non Terminal term
Popped Non Terminal factor
Popped Non Terminal var
Popped Terminal ID
LINE NO: 20	LEXEME: /	TOKEN: /
Popped Non Terminal whichId
Popped Non Terminal leftFactored_term
Popped Non Terminal md
Popped Terminal DIV
LINE NO: 20	LEXEME: 5	TOKEN: NUM
Popped Non Terminal factor
Popped Non Terminal var
Popped Terminal NUM
LINE NO: 20	LEXEME: +	TOKEN: +
Popped Non Terminal leftFactored_term
Popped Non Terminal leftFactored_arithmeticExpr
Popped Non Terminal pm
Popped Terminal PLUS
LINE NO: 20	LEXEME: c	TOKEN: ID
Popped Non Terminal term
Popped Non Terminal factor
Popped Non Terminal var
Popped Terminal ID
LINE NO: 20	LEXEME: ;	TOKEN: ;
Popped Non Terminal whichId
Popped Non Terminal leftFactored_term
Popped Non Terminal leftFactored_arithmeticExpr
Popped Non Terminal relationalTerm
Popped Non Terminal logicalTerm
Popped Terminal SEMICOL
LINE NO: 21	LEXEME: end	TOKEN: end
Popped Non Terminal statements
Popped Terminal END
Tokenized EOF , sending it for parsing
Popped Non Terminal otherModules
Popped Terminal EOF
Tokenized EOF , sending it for parsing
Tokenized EOF , sending it for parsing
